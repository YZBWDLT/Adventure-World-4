========== 模板注意事项 ==========

· level记分板给予的分数有3位，三位（xyz）分别代表关卡x-y已完成了z波，例如131为1-3完成第1波。
· 下文请全文复制粘贴到对应区域
· (x)(y)(wave)分别代表x-y关完成了第wave波；其他括号括起的内容为命令中的需替换内容
· 使用Ctrl+D可快速选中相同内容并替换
· start_wave3/4的基本内容和start_wave2一致
· actionbar_title的内容还应按波数调整，不可强套模板
· levels/system中的文件只应该按模板添加内容，而不新建文件或完全覆写

========== start_wave1.mcfunction ==========
# ===== 开始游戏 =====
# 对本关进行一定的初始化

## --- 设置level ---
scoreboard players set @e[name=level] background (x)(y)0

## --- 封闭入口与出口 ---
fill (入口两坐标) minecraft:cobblestone_wall["wall_block_type":"(对应墙材质)"]
fill (出口两坐标) minecraft:cobblestone_wall["wall_block_type":"(对应墙材质)"]

## 复制建筑（如果需要的话）
structure load (结构名) (读取的坐标位置)

## --- 设置重生点 ---
## 设置到关卡内密闭的3*3空间内，以便死亡玩家旁观
spawnpoint @a (3*3空间中心处)

## 生成生物
## 格式：execute @e[name=level,scores={background=关卡代码}] ~~~ execute @a[scores={isAlive=1}] 生成位置 function 生成的怪物
execute @e[name=level,scores={background=(x)(y)0}] ~~~ execute @a[scores={isAlive=1}] (生怪位置) function system/summon/(生怪类型)(等级)
execute @e[name=level,scores={background=(x)(y)0}] ~~~ execute @a[scores={isAlive=1}] (生怪位置) function system/summon/(生怪类型)(等级)
execute @e[name=level,scores={background=(x)(y)0}] ~~~ execute @a[scores={isAlive=1}] (生怪位置) function system/summon/(生怪类型)(等级)
execute @e[name=level,scores={background=(x)(y)0}] ~~~ execute @a[scores={isAlive=1}] (生怪位置) function system/summon/(生怪类型)(等级)
execute @e[name=level,scores={background=(x)(y)0}] ~~~ execute @a[scores={isAlive=1}] (生怪位置) function system/summon/(生怪类型)(等级)

## --- 调用所有关卡通用的开始关卡函数 ---
function methods/all_levels/start_level

## 标题
title @a subtitle §c(x)-(y)

========== start_wave2.mcfunction ==========
# 开始游戏 - 后续波

## 生成生物
## 格式：execute @e[name=level,scores={background=关卡代码}] ~~~ execute @a[scores={isAlive=1}] 生成位置 function 生成的怪物
execute @e[name=level,scores={background=(x)(y)(wave)}] ~~~ execute @a[scores={isAlive=1}] (生怪位置) function system/summon/(生怪类型)(等级)
execute @e[name=level,scores={background=(x)(y)(wave)}] ~~~ execute @a[scores={isAlive=1}] (生怪位置) function system/summon/(生怪类型)(等级)
execute @e[name=level,scores={background=(x)(y)(wave)}] ~~~ execute @a[scores={isAlive=1}] (生怪位置) function system/summon/(生怪类型)(等级)
execute @e[name=level,scores={background=(x)(y)(wave)}] ~~~ execute @a[scores={isAlive=1}] (生怪位置) function system/summon/(生怪类型)(等级)
execute @e[name=level,scores={background=(x)(y)(wave)}] ~~~ execute @a[scores={isAlive=1}] (生怪位置) function system/summon/(生怪类型)(等级)

## --- 调用所有关卡通用的开始关卡函数 ---
function methods/all_levels/start_wave_more

========== level_tester.mcfunction ==========
# 关卡检测器(循环执行)
# 本检测器需在active.timeline>=1时运行，否则检测器不工作。

# -----成功判定-----
## 当检测到没有怪物而玩家仍处于游玩状态时，认定玩家已经通过这一波
## 此时将对level记分板加分（表示已完成波数+1），并暂停关卡检测和玩家的游玩状态
execute @a[scores={isAlive=0..1},c=1] ~~~ execute @e[name=monsterAmount,scores={background=0}] ~~~ scoreboard players add @e[name=level] background 1
execute @a[scores={isAlive=0..1},c=1] ~~~ execute @e[name=monsterAmount,scores={background=0}] ~~~ function methods/timeline/disable
execute @a[scores={isAlive=0..1},c=1] ~~~ execute @e[name=monsterAmount,scores={background=0}] ~~~ tag @a remove playing

## 当玩家结束战斗后（例如1-3总共2波），那么给予奖励
## 当玩家还未结束战斗（有剩余波数），那么触发下一波
execute @e[name=level,scores={background=(x)(y)(总波数)}] ~~~ execute @a[scores={isAlive=2},c=1] ~~~ function levels/(x)_(y)/bonus
execute @e[name=level,scores={background=(x)(y)(wave)}] ~~~ execute @a[scores={isAlive=2}] ~~~ function levels/(x)_(y)/start_wave(前面指代的(wave)+1)

# -----失败判定-----

## 对在重生点的玩家移除alive标签
execute @a[(x=...,y=...,z=...，位置为start_wave1中重生点的x,y,z坐标均-1的坐标),dx=2,dy=3,dz=2] ~~~ scoreboard players set @s isAlive 0

## 当不存在标签为alive的玩家时，游戏失败
execute @e[name=alivePlayersAmount,scores={background=0}] ~~~ function levels/(x)_(y)/game_lose

## 游戏失败后，停止关卡检测器的工作，并移除多余的绳枪
execute @e[name=alivePlayersAmount,scores={background=0}] ~~~ function methods/timeline/disable
execute @e[name=alivePlayersAmount,scores={background=0}] ~~~ tag @a remove playing
execute @e[name=alivePlayersAmount,scores={background=0}] ~~~ kill @e[family=hookshot]

========== game_lose.mcfunction ==========
# ===== 游戏失败 =====

## --- 降级level记分板 ---
scoreboard players set @e[name=level] background (x)(上一关的y)(上一关的最大波数)

## --- 传送到上一个关卡的重生点并重新设置重生点 ---
tp @a (上一关的某个合适位置)
spawnpoint @a (上一关的某个合适位置)

## --- 打开入口与出口 ---
fill (入口两坐标) air
fill (出口两坐标) air

## --- 调用所有关卡通用的游戏失败函数 ---
function methods/all_levels/game_lose

========== bonus.mcfunction ==========
# ===== 关卡奖励 =====
# 关卡完成后执行

## --- tellraw提示 ---
tellraw @a {"rawtext":[{"text":"§a(x)-(y)已完成！\n§b(+n)(物品)\n§a[(待提升上限的药水)]§f上限+1，当前为(累计的上限)。"}]}

## --- 打开入口与出口 ---
fill (入口两坐标) air
fill (出口两坐标) air

## --- 设置重生点 ---
spawnpoint @a (坐标)

## --- 调用所有关卡通用奖励功能 ---
function methods/all_levels/bonus

========== actionbar_title.mcfunction ==========
# ===== 快捷栏标题 =====
# 红色方块(§c)代表未完成的普通怪物波，绿色方块(§a)反之；紫色(§d)代表未完成的BOSS，蓝色(§b)反之。
# 循环执行，由快捷栏标题控制器(functions/system/actionbar_title)控制，在改动完本文件后应当及时适配控制器，防止标题不显示

execute @e[name=level,scores={background=(x)(y)0}] ~~~ execute @a[scores={isAlive=1}] ~~~ titleraw @s actionbar {"rawtext": [{"translate": "§l关卡 (x)-(y) §r§f| §b剩余怪物数目 §f%%s | §c■■","with":{"rawtext":[{"score":{"objective":"background","name":"@e[name=monsterAmount]"}}]}}]}
execute @e[name=level,scores={background=(x)(y)1}] ~~~ execute @a[scores={isAlive=1}] ~~~ titleraw @s actionbar {"rawtext": [{"translate": "§l关卡 (x)-(y) §r§f| §b剩余怪物数目 §f%%s | §a■§c■","with":{"rawtext":[{"score":{"objective":"background","name":"@e[name=monsterAmount]"}}]}}]}
execute @e[name=level,scores={background=(x)(y)2}] ~~~ execute @a ~~~ titleraw @s actionbar {"rawtext": [{"translate": "§l关卡 (x)-(y) §r§f| §a关卡已完成"}]}

execute @e[name=level,scores={background=(x)(y)0}] ~~~ execute @a[scores={isAlive=0}] ~~~ titleraw @s actionbar {"rawtext": [{"translate": "§l关卡 (x)-(y) §r§f| §b剩余怪物数目 §f%%s | §c■■ §r§f| §c你已死亡，现在正在观战","with":{"rawtext":[{"score":{"objective":"background","name":"@e[name=monsterAmount]"}}]}}]}
execute @e[name=level,scores={background=(x)(y)1}] ~~~ execute @a[scores={isAlive=0}] ~~~ titleraw @s actionbar {"rawtext": [{"translate": "§l关卡 (x)-(y) §r§f| §b剩余怪物数目 §f%%s | §a■§c■ §r§f| §c你已死亡，现在正在观战","with":{"rawtext":[{"score":{"objective":"background","name":"@e[name=monsterAmount]"}}]}}]}

========== levels/system/into_level_tester.mcfunction (添加内容) ==========
execute @e[name=level,scores={background=(本章x)00..(本章x)(上一关的y)9}] ~~~ execute @a[(x=...,y=...,z=...，位置为关卡入口角落xyz最小值坐标),dx=4,dy=4,dz=4] ~~~ execute @s[scores={isAlive=2},tag=!intoLevel] ~~~ tag @s add intoLevel
execute @e[name=level,scores={background=(本章x)00..(本章x)(上一关的y)9}] ~~~ execute @a[(x=...,y=...,z=...，位置为关卡入口角落xyz最小值坐标),dx=4,dy=4,dz=4] ~~~ execute @s[tag=intoLevel,scores={isAlive=2}] ~~~ function levels/(x)_(y)/start_wave1
execute @e[name=level,scores={background=(本章x)00..(本章x)(上一关的y)9}] ~~~ execute @e[family=hookshot,(x=...,y=...,z=...，位置为关卡入口角落xyz最小值坐标),dx=4,dy=4,dz=4] ~~~ kill @s